GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    event.create('extreme_cracking_unit')
        .category('drack')
        .setEUIO('in')
        .setMaxIOSize(3, 0, 2, 1)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.BATH)
})

GTCEuStartupEvents.registry('gtceu:machine', event => {
    event.create('extreme_cracking_unit', 'multiblock')
        .rotationState(RotationState.ALL)
		.recipeTypes(['extreme_cracking_unit', 'cracker'])
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.OC_NON_PERFECT, GTRecipeModifiers.BATCH_MODE])
        .appearanceBlock(() => Block.getBlock('kubejs:naquadria_turbine_casing'))
        .pattern(definition => FactoryBlockPattern.start()      
        .aisle('AAAAA####', 'ADDDA####', 'ADDDA####', 'ADDDA####', 'ADDDA####', 'ADDDA####', 'AAAAA####', '#AAA#####')
        .aisle('AAAAA#BBB', 'DEEEA#BCB', 'DGGGA#BCB', 'DEEEA#BCB', 'DGGGA#BCB', 'DEEEA#BCB', 'AGGGA#BBB', 'AAAAA####')
		.aisle('AAAAA#BCB', 'DEFFFFFFC', 'DGFGA#CFC', 'DEFFFFFFC', 'DGFGA#CFC', 'DEFFFFFFC', 'AGFGA#BMB', 'AAAAA####')
		.aisle('AAAAA#BBB', 'DEEEA#BCB', 'DGGGA#BCB', 'DEEEA#BCB', 'DGGGA#BCB', 'DEEEA#BCB', 'AGGGA#BBB', 'AAAAA####')
		.aisle('AAAAA####', 'ADDDA####', 'ADDDA####', 'ADDDA####', 'ADDDA####', 'ADDDA####', 'AAKAA####', '#AAA#####')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where("B", Predicates.blocks('gtceu:nonconducting_casing'))
            .where("C", Predicates.blocks('gtceu:heat_vent'))
			.where("D", Predicates.blocks('gtceu:fusion_glass'))
			.where("E", Predicates.blocks('gtceu:fusion_casing_mk2'))
			.where("F", Predicates.blocks('kubejs:osmiridium_pipe_casing'))
			.where("G", Predicates.blocks('gtceu:superconducting_coil'))
			.where("M", Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
			.where("A", Predicates.blocks('kubejs:naquadria_turbine_casing')
                .or(Predicates.abilities(PartAbility.EXPORT_ITEMS, PartAbility.EXPORT_FLUIDS, PartAbility.INPUT_ENERGY, PartAbility.IMPORT_FLUIDS))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
				.or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
		)
            
            .where('#', Predicates.any())
            .build()
        )
        .workableCasingModel("kubejs:block/casings/machine_casing_turbine_naquadria", "gtceu:block/multiblock/cracking_unit")
})